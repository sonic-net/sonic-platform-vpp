# Copyright (c) 2023 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: SONiC Software Data Plane Automation - VM Bring up
  hosts: clusters
  tasks:
   - name: Extract SONiC-VPP VM Image
     shell: | 
       cd sonic-vpp
       sudo chown "{{ ansible_user }}" sonic-vpp.img.gz
       gzip -d sonic-vpp.img.gz
       cp sonic-vpp.img sonic-vpp1.img
       cp sonic-vpp.img sonic-vpp2.img
     register: command_result
     failed_when: command_result.rc != 0
     tags:
     - build 
   - name:  Launch SONiC-VPP VM 1
     shell: | 
       cd sonic-vpp
       sudo qemu-system-x86_64 -name sonic-simulator_1 -m 4096M -cpu host -smp cpus=4 -drive file=./sonic-vpp1.img,index=0,media=disk,id=drive0 -serial telnet:127.0.0.1:5001,server,nowait -monitor tcp:127.0.0.1:44001,server,nowait -device e1000,netdev=net0 -netdev tap,ifname=tap1,id=net0 -device e1000,netdev=net1 -netdev tap,ifname=sonic1-tap1,id=net1 -device e1000,netdev=net2 -netdev tap,ifname=sonic1-tap2,id=net2  -display vnc=:4 -daemonize -enable-kvm -net user,hostfwd=tcp::10021-:22 -net nic
     register: command_result
     failed_when: command_result.rc != 0 
     tags:
     - build      
   - name:  Launch SONiC-VPP VM 2
     shell: | 
       cd sonic-vpp
       sudo qemu-system-x86_64 -name sonic-simulator_2 -m 4096M -cpu host -smp cpus=4 -drive file=./sonic-vpp2.img,index=0,media=disk,id=drive0 -serial telnet:127.0.0.1:5002,server,nowait -monitor tcp:127.0.0.1:44002,server,nowait -device e1000,netdev=net0 -netdev tap,ifname=tap2,id=net0 -device e1000,netdev=net1,mac=52:54:00:12:35:58 -netdev tap,ifname=sonic2-tap1,id=net1 -device e1000,netdev=net2,mac=52:54:00:12:35:59 -netdev tap,ifname=sonic2-tap2,id=net2 -display vnc=:5 -daemonize -enable-kvm -net user,hostfwd=tcp::10022-:22 -net nic
     register: command_result
     failed_when: command_result.rc != 0 
     tags:
     - build      
   - name: Pause for 2 minutes for SONiC VM to bootup
     ansible.builtin.pause:
       minutes: 2
     tags:
     - build        
   - name: Cleanup SSH known hosts
     shell: | 
       sudo ssh-keygen -f "/root/.ssh/known_hosts" -R [localhost]:10021
       sudo ssh-keygen -f "/home/{{ ansible_user }}/.ssh/known_hosts" -R [localhost]:10021
       sudo ssh-keygen -f "/root/.ssh/known_hosts" -R [localhost]:10022
       sudo ssh-keygen -f "/home/{{ ansible_user }}/.ssh/known_hosts" -R [localhost]:10022
     tags:
     - build        
   - name: Configure SONiC-VPP data path interfaces VM 1
     ansible.builtin.shell: |
       set timeout 30
       spawn ssh -o StrictHostKeyChecking=no admin@localhost -p 10021
       expect "password:"
       send "{{ sonic_vm_password }}\n"
       expect "admin@sonic:~$ "
       send "sudo config interface ip add Loopback0 {{ sonic_vm1_Loopback0 }}/24\n"
       expect "admin@sonic:~$ "
       send "sudo config interface ip add Ethernet0 {{ sonic_vm1_ethernet0 }}/24\n"
       expect "admin@sonic:~$ "
       send "sudo config interface ip add Ethernet1 {{ sonic_vm1_ethernet1 }}/24\n"
       expect "admin@sonic:~$ "
       send "sudo config interface startup Loopback0\n"
       expect "admin@sonic:~$ "
       send "sudo config interface startup Ethernet0\n"
       expect "admin@sonic:~$ "
       send "sudo config interface startup Ethernet1\n"
       expect "admin@sonic:~$ "
       send "sudo config save -y\n"
       expect "admin@sonic:~$ "
       send "vtysh\n"
       expect "sonic# "
       send "config\n"
       expect "sonic(config)# "
       send "router bgp {{ bgp_as }}\n"
       expect "sonic(config-router)# "
       send "bgp router-id  {{ sonic_vm1_Loopback0 }}\n"
       expect "sonic(config-router)# "
       send "neighbor {{ sonic_vm2_ethernet1 }} remote-as {{ bgp_as }}\n"
       expect "sonic(config-router)# "
       send "address-family ipv4 unicast\n"
       expect "sonic(config-router-af)# "
       send "network {{ sonic_host_1_prefix }}\n"
       expect "sonic(config-router-af)# "
       send "neighbor {{ sonic_vm2_ethernet1 }} activate\n"
       expect "sonic(config-router-af)# "
       send "end\n"
       expect "sonic# "
       exit 0
     args:
       executable: /usr/bin/expect
     tags:
     - build        
   - name: Configure SONiC-VPP data path interfaces VM 2
     ansible.builtin.shell: |
       set timeout 30
       spawn ssh -o StrictHostKeyChecking=no admin@localhost -p 10022
       expect "password:"
       send "{{ sonic_vm_password }}\n"
       expect "admin@sonic:~$ "
       send "sudo config interface ip add Loopback0 {{ sonic_vm2_Loopback0 }}/24\n"
       expect "admin@sonic:~$ "
       send "sudo config interface ip add Ethernet0 {{ sonic_vm2_ethernet0 }}/24\n"
       expect "admin@sonic:~$ "
       send "sudo config interface ip add Ethernet1 {{ sonic_vm2_ethernet1 }}/24\n"
       expect "admin@sonic:~$ "
       send "sudo config interface startup Loopback0\n"
       expect "admin@sonic:~$ "
       send "sudo config interface startup Ethernet0\n"
       expect "admin@sonic:~$ "
       send "sudo config interface startup Ethernet1\n"
       expect "admin@sonic:~$ "
       send "sudo config save -y\n"
       expect "admin@sonic:~$ "
       send "vtysh\n"
       expect "sonic# "
       send "config\n"
       expect "sonic(config)# "
       send "router bgp {{ bgp_as }}\n"
       expect "sonic(config-router)# "
       send "bgp router-id  {{ sonic_vm2_Loopback0 }}\n"
       expect "sonic(config-router)# "
       send "neighbor {{ sonic_vm1_ethernet1 }} remote-as {{ bgp_as }}\n"
       expect "sonic(config-router)# "
       send "address-family ipv4 unicast\n"
       expect "sonic(config-router-af)# "
       send "network {{ sonic_host_2_prefix }}\n"
       expect "sonic(config-router-af)# "
       send "neighbor {{ sonic_vm1_ethernet1 }} activate\n"
       expect "sonic(config-router-af)# "
       send "end\n"
       expect "sonic# "
       exit 0
     args:
       executable: /usr/bin/expect
     tags:
     - build        
   - name: Configure Host Interfaces
     shell: |
       sudo ip link set dev sonic1-tap1 up
       sudo ip link set dev sonic2-tap1 up
       sudo ip addr add {{ sonic_host_tap_1 }}/24 dev sonic1-tap1
       sudo ip addr add {{ sonic_host_tap_2 }}/24 dev sonic2-tap1
       sudo ip route add  {{ sonic_vpp_prefix }} via {{ sonic_vm1_ethernet0 }}
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - build      
   - name: Configure Bridge to connect sonic-vm interfaces
     shell: |
       sudo ip link set dev sonic1-tap2 up
       sudo ip link set dev sonic2-tap2 up
       sudo brctl addbr sonic-vpp-vm
       sudo brctl addif sonic-vpp-vm sonic1-tap2 
       sudo brctl addif sonic-vpp-vm sonic2-tap2 
       sudo ip link set dev sonic-vpp-vm up
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - build      
   - name: Pause for 2 minutes for routing to sattle
     ansible.builtin.pause:
       minutes: 2
     tags:
     - build        
   - name: Verify SONiC Routing 1
     shell: |
       ping -c5 {{ sonic_vm1_ethernet1 }}
     register: command_result
     failed_when: "'0 received' in command_result.stdout"
     tags:
     - build      
   - name: Verify SONiC Routing 2
     shell: |
       ping -c5 {{ sonic_vm2_ethernet1 }}
     register: command_result
     failed_when: "'0 received' in command_result.stdout"
     tags:
     - build      
   - name: Cleaning up SONiC-VPP VM Instance
     shell: |
       sudo pkill -9 -f qemu-system-x86_64
     register: command_result
     failed_when: command_result.rc != -9
     tags:
     - tear      
   - name: Delete Bridge
     shell: |
       sudo ip link set dev sonic-vpp-vm down
       sudo brctl delbr sonic-vpp-vm
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - tear     
   - name: Removing SONiC-VPP VM Image file
     shell: |
       cd sonic-vpp
       rm sonic-vpp.img sonic-vpp1.img sonic-vpp2.img
     register: command_result
     failed_when: command_result.rc != 0 
     tags:
     - tear
     
